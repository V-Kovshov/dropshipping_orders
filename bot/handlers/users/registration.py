from aiogram import Router, Bot
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.utils.commands import registered_users_commands
from bot.utils.db import registration_user
from bot.utils.statesform import FSMRegisterForm
from bot.keyboards.base import reply
from bot.filters.filters import RegisterUserFilter

router = Router()


@router.message(Command('registration'), RegisterUserFilter())
async def start_registration(msg: Message, state: FSMContext) -> None:
    await msg.answer(f"<b>{msg.from_user.first_name}</b>, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è: ")
    await state.set_state(FSMRegisterForm.GET_NAME)


@router.message(FSMRegisterForm.GET_NAME)
async def get_name(msg: Message, state: FSMContext) -> None:
    await msg.answer(f"<b>–í–∞—à–µ —ñ–º'—è</b>: {msg.text}‚úÖ\n\n"\
                     "–î–∞–ª—ñ –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ‚¨áÔ∏è:",
                     reply_markup=reply.get_phone_keyboard())
    await state.update_data(name=msg.text)
    await state.update_data(tg_id=msg.from_user.id)
    try:
        await state.update_data(username=msg.from_user.username)
    except:
        await state.update_data(username=' ')

    await state.update_data(balance=0)

    await state.set_state(FSMRegisterForm.GET_PHONE)


@router.message(FSMRegisterForm.GET_PHONE)
async def get_phone(msg: Message, state: FSMContext) -> None:
    await msg.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ—î—ó –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –≤–∏–ø–ª–∞—Çüí∞:')
    if msg.text:
        await state.update_data(phone=msg.text)
    elif msg.contact is not None:
        await state.update_data(phone=msg.contact.phone_number)

    await state.set_state(FSMRegisterForm.GET_CARD)


@router.message(FSMRegisterForm.GET_CARD)
async def get_card(msg: Message, state: FSMContext) -> None:
    await msg.answer(f"<b>–í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞</b>:\n {msg.text}‚úÖ")
    await state.update_data(bank_card=msg.text)
    context_data = await state.get_data()
    name = context_data.get('name')
    phone = context_data.get('phone')
    karta = context_data.get('bank_card')
    data_user = f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –Ω–∏–∂—á–µ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞–º –ø—É–Ω–∫—Ç‚è≥:\n\n" \
                f"<b>–í–∞—à–µ —ñ–º'—è:</b>\n ‚ñ™Ô∏è{name}\n\n" \
                f"<b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b>\n ‚ñ™Ô∏è{phone}\n\n" \
                f"<b>–í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞ –¥–ª—è –≤–∏–ø–ª–∞—Ç:</b>\n ‚ñ™Ô∏è{karta}"
    await msg.answer(data_user, reply_markup=reply.confirmation_data())

    await state.set_state(FSMRegisterForm.FINISH_REGISTER)


@router.message(FSMRegisterForm.FINISH_REGISTER)
async def finish_register(msg: Message, state: FSMContext, bot: Bot) -> None:
    if msg.text == '‚úÖ–í—Å–µ –≤—ñ—Ä–Ω–æ, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é':
        context_data = await state.get_data()
        await registration_user(context_data)
        await msg.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñüéâ', reply_markup=reply.start_keyboard())
        await registered_users_commands(bot)

    elif msg.text == 'üìõ–Ñ –ø–æ–º–∏–ª–∫–æ–≤—ñ –¥–∞–Ω—ñ, –ø–æ—á–Ω–µ–º–æ –∑–∞–Ω–æ–≤–æ':
        await state.clear()
        await msg.answer('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å <u><b>/registration</b></u>,\n–¥–ª—è —Ç–æ–≥–æ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.')
    elif msg.text == '‚ùå–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é':
        await state.clear()
        await msg.answer('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–∞.', reply_markup=reply.start_keyboard())
