import logging

from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async

from bot.keyboards.base import reply
from bot.keyboards.inline.order_kb import get_inline_shoes, get_inline_size
# from bot.middlewares.size import GetSizeMiddleware
from bot.utils.db import check_user_in_db, Order
from bot.utils.statesform import FSMCreateOrder

router = Router()
# router.callback_query.middleware(GetSizeMiddleware())
order = Order()

logging.basicConfig(level=logging.INFO,
					format='%(filename)s -> [LINE:%(lineno)d] -> %(levelname)-8s [%(asctime)s] -> %(message)s',
					filename='bot/logging.log',
					filemode='w')


@router.message(F.text == 'üõí–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
async def place_order(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–ª—ñ–Ω—î–Ω—Ç –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —Ç–∞ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É

	:param msg:
	:param state:
	:return: None
	"""
	user_id = msg.from_user.id
	user_in_db = await check_user_in_db(user_id=user_id)
	if user_in_db:
		await msg.answer('üìù–í–≤–µ–¥—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É:')
		await state.set_state(FSMCreateOrder.CHOOSE_MODEL)
	else:
		user_msg = 'ü§î–î–ª—è –ø–æ—á–∞—Ç–∫—É –¥–∞–≤–∞–π –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ç–≤—ñ–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å.\n\n' \
				   '–©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å\n<u><b>/registration</b></u>'
		await msg.answer(user_msg)


@router.message(FSMCreateOrder.CHOOSE_MODEL)
async def search_model(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –æ—Ç—Ä–∏–º—É—î –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É —Ç–∞ —à—É–∫–∞—î –º–æ–¥–µ–ª—å –≤ –ë–î –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É

	:param msg: Message
	:param state: FSMContext
	:return: None
	"""
	model = await order.check_article(msg.text)
	if not model:
		await msg.answer(f"ü§∑üèº‚Äç‚ôÇÔ∏è'{msg.text}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –º–æ–¥–µ–ª—å.")
	else:
		await msg.answer('üë†–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:', reply_markup=get_inline_shoes(model))
		await state.set_state(FSMCreateOrder.CHOOSE_SIZE)


@router.callback_query(FSMCreateOrder.CHOOSE_SIZE)
async def choose_size(call: CallbackQuery, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î –º–æ–¥–µ–ª—å –≤–∑—É—Ç—Ç—è —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ñ–æ—Ç–æ –º–æ–¥–µ–ª—ñ, –æ–ø–∏—Å —Ç–∞ —Ä–æ–∑–º—ñ—Ä–∏ –º–æ–¥–µ–ª—ñ

	:param call: CallbackQuery
	:param state: FSMContext
	:return: None
	"""
	await state.update_data(model=int(call.data))

	shoes = await order.get_model(int(call.data))
	shoes_img_url = str(shoes.image.url)[1:]
	photo = FSInputFile(shoes_img_url)

	sizes = await order.get_model_sizes(model_id=int(call.data))
	await call.message.answer_photo(
		photo=photo,
		caption=f"{shoes.description}\n\nüìè–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–º—ñ—Ä:",
		reply_markup=get_inline_size(sizes)
	)
	await state.set_state(FSMCreateOrder.CLIENT_NAME)
	await call.answer()


@router.callback_query(FSMCreateOrder.CLIENT_NAME)
async def get_client_name(call: CallbackQuery, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è —Ç–∞ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –ü–Ü–ë –∫–ª—ñ—î–Ω—Ç–∞

	:param call:
	:param state:
	:return: None
	"""
	await state.update_data(shoes_size=int(call.data))
	await call.message.answer("ü™™–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –∫–ª—ñ—î–Ω—Ç–∞:")
	await state.set_state(FSMCreateOrder.CLIENT_PHONE)
	await call.answer()


@router.message(FSMCreateOrder.CLIENT_PHONE)
async def get_client_phone(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î –ü–Ü–ë –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞

	:param msg:
	:param state:
	:return: None
	"""
	await state.update_data(client_name=msg.text)
	await msg.answer('üì±–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞:')
	await state.set_state(FSMCreateOrder.OTHER_DATA)


@router.message(FSMCreateOrder.OTHER_DATA)
async def get_other_data(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –æ—Ç—Ä–∏–º—É—î —ñ–Ω—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—à—Ç–∏ —Ç–æ—â–æ)

	:param msg:
	:param state:
	:return: None
	"""
	await state.update_data(client_phone=msg.text)
	await msg.answer('üì•–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É,\n–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏ —Ç–∞ —ñ–Ω—à—ñ –¥–∞–Ω—ñ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏:')
	await state.set_state(FSMCreateOrder.POSTPAYMENT)


@router.message(FSMCreateOrder.POSTPAYMENT)
async def get_postpayment(msg: Message, state: FSMContext) -> None:
	await state.update_data(otder_data=msg.text)
	await msg.answer('üí∏–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –Ω–∞–∫–ª–∞–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É, —è–∫—â–æ –≤—ñ–Ω —î.\n\n'
					'–Ø–∫—â–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É –Ω–µ–º–∞—î - –≤–≤–µ–¥—ñ—Ç—å 0 (—Ü–∏—Ñ—Ä–∞)')
	await state.set_state(FSMCreateOrder.BALANCE_PAY)


@router.message(FSMCreateOrder.BALANCE_PAY)
async def advance_from_balance(msg: Message, state: FSMContext) -> None:
	await state.update_data(postpayment=int(msg.text))
	user_id = msg.from_user.id
	available_balance = await order.get_balance(user_id)
	await msg.answer('üí≥–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∞–≤–∞–Ω—Å—É —Å –±–∞–ª–∞–Ω—Å—É:\n\n'
					f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å: {available_balance},00–≥—Ä–Ω\n\n'
					'üîú–Ø–∫—â–æ –±—É–¥–µ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ - –≤–≤–µ–¥—ñ—Ç—å 0(—Ü–∏—Ñ—Ä–∞) —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫\n\n')
	await state.set_state(FSMCreateOrder.SCREEN_PAYMENT)


@router.message(FSMCreateOrder.SCREEN_PAYMENT)
async def get_screen_payment(msg: Message, state: FSMContext) -> None:
	print(msg)
