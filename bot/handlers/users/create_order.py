import logging
import os

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, File
from aiogram.fsm.context import FSMContext

from bot.keyboards.base import reply
from bot.keyboards.inline.order_kb import get_inline_shoes, get_inline_size
from bot.utils.db import check_user_in_db, Order
from bot.utils.statesform import FSMCreateOrder


router = Router()
order = Order()

logging.basicConfig(level=logging.INFO,
					format='%(filename)s -> [LINE:%(lineno)d] -> %(levelname)-8s [%(asctime)s] -> %(message)s',
					filename='bot/logging.log',
					filemode='w')


@router.message(F.text == 'üõí–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
async def place_order(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–ª—ñ—î–Ω—Ç –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —Ç–∞ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É.

	:param msg:
	:param state:
	:return: None
	"""
	user_id = msg.from_user.id
	user_in_db = await check_user_in_db(user_id=user_id)
	if user_in_db:
		await msg.answer('üìù–í–≤–µ–¥—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É:')
		await state.set_state(FSMCreateOrder.CHOOSE_MODEL)
	else:
		user_msg = 'ü§î–î–ª—è –ø–æ—á–∞—Ç–∫—É –¥–∞–≤–∞–π –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ç–≤—ñ–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å.\n\n' \
				'–©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å\n<u><b>/registration</b></u>'
		await msg.answer(user_msg)


@router.message(FSMCreateOrder.CHOOSE_MODEL)
async def search_model(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –æ—Ç—Ä–∏–º—É—î –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É —Ç–∞ —à—É–∫–∞—î –º–æ–¥–µ–ª—å –≤ –ë–î –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É.

	:param msg: Message
	:param state: FSMContext
	:return: None
	"""
	model = await order.check_article(msg.text)
	if not model:
		await msg.answer(f"ü§∑üèº‚Äç‚ôÇÔ∏è'{msg.text}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –º–æ–¥–µ–ª—å.")
	else:
		await msg.answer('üë†–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:', reply_markup=get_inline_shoes(model))
		await state.set_state(FSMCreateOrder.CHOOSE_SIZE)


@router.callback_query(FSMCreateOrder.CHOOSE_SIZE)
async def choose_size(call: CallbackQuery, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î –º–æ–¥–µ–ª—å –≤–∑—É—Ç—Ç—è —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ñ–æ—Ç–æ –º–æ–¥–µ–ª—ñ, –æ–ø–∏—Å —Ç–∞ —Ä–æ–∑–º—ñ—Ä–∏ –º–æ–¥–µ–ª—ñ.

	:param call: CallbackQuery
	:param state: FSMContext
	:return: None
	"""
	await state.update_data(model=int(call.data))

	shoes = await order.get_model(int(call.data))
	shoes_img_url = str(shoes.image.url)[1:]
	photo = FSInputFile(shoes_img_url)

	sizes = await order.get_model_sizes(model_id=int(call.data))
	await call.message.answer_photo(
		photo=photo,
		caption=f"{shoes.description}\n\nüìè–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–º—ñ—Ä:",
		reply_markup=get_inline_size(sizes)
	)
	await state.set_state(FSMCreateOrder.CLIENT_NAME)
	await call.answer()


@router.callback_query(FSMCreateOrder.CLIENT_NAME)
async def get_client_name(call: CallbackQuery, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è —Ç–∞ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –ü–Ü–ë –∫–ª—ñ—î–Ω—Ç–∞.

	:param call: CallbackQuery
	:param state: FSMContext
	:return: None
	"""
	await state.update_data(shoes_size=int(call.data))
	await call.message.answer("ü™™–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –∫–ª—ñ—î–Ω—Ç–∞:")
	await state.set_state(FSMCreateOrder.CLIENT_PHONE)
	await call.answer()


@router.message(FSMCreateOrder.CLIENT_PHONE)
async def get_client_phone(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î –ü–Ü–ë –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞.

	:param msg: Message
	:param state: FSMContext
	:return: None
	"""
	await state.update_data(client_name=msg.text)
	await msg.answer('üì±–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞:')
	await state.set_state(FSMCreateOrder.OTHER_DATA)


@router.message(FSMCreateOrder.OTHER_DATA)
async def get_other_data(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –æ—Ç—Ä–∏–º—É—î —ñ–Ω—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—à—Ç–∏ —Ç–æ—â–æ).

	:param msg: Message
	:param state: FSMContext
	:return: None
	"""
	await state.update_data(client_phone=msg.text)
	await msg.answer('üì•–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É,\n–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏ —Ç–∞ —ñ–Ω—à—ñ –¥–∞–Ω—ñ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏:')
	await state.set_state(FSMCreateOrder.CHOICE_PAY)


@router.message(FSMCreateOrder.CHOICE_PAY)
async def choice_pay(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º—ñ—Å—Ü–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ—á—ñ–∫—É—î –≤—ñ–¥ —é–∑–µ—Ä–∞ —Ç–∏–ø –æ–ø–ª–∞—Ç–∏.

	:param msg: Message
	:param state: FSMContext
	:return: None
	"""
	await state.update_data(other_data=msg.text)
	await msg.answer('–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–ª–∞—Ç–∏ (–∑ –±–∞–ª–∞–Ω—Å—É –∞–±–æ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞):', reply_markup=reply.choice_pay_kb())
	await state.set_state(FSMCreateOrder.CHOSE_PAY)


@router.message(FSMCreateOrder.CHOSE_PAY, F.text.in_({'–ó –±–∞–ª–∞–Ω—Å—É', '–ü–æ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç—ñ'}))
async def chose_pay(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –≤–∏–∑–Ω–∞—á–∞—î —è–∫–∞ –æ–ø–ª–∞—Ç–∞ (–∑ –±–∞–ª–∞–Ω—Å—É –∞–±–æ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞) –±—É–ª–∞ –æ–±—Ä–∞–Ω–∞ —Ç–∞ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Ç–∏–ø –æ–ø–ª–∞—Ç–∏.

	:param msg: Message
	:param state: FSMContext
	:return: None
	"""
	if msg.text == '–ó –±–∞–ª–∞–Ω—Å—É':
		await msg.answer('–ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ –∞–±–æ –ø–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞?', reply_markup=reply.advance_or_full_kb())
		await state.set_state(FSMCreateOrder.BALANCE_PAY)
	elif msg.text == '–ü–æ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç—ñ':
		await msg.answer('–ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ –∞–±–æ –ø–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞?', reply_markup=reply.advance_or_full_kb())
		await state.set_state(FSMCreateOrder.SCREEN_PAY)


@router.message(FSMCreateOrder.CHOSE_PAY)
async def chose_pay_wrong(msg: Message, state: FSMContext) -> None:
	"""
	–Ø–∫—â–æ —é–∑–µ—Ä –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∞ –≤–≤—ñ–≤ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç.

	:param state: FSMContext
	:param msg: Message
	:return: None
	"""
	await msg.answer('–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –æ–ø–ª–∞—Ç–∏ –Ω–∏–∂—á–µ:', reply_markup=reply.choice_pay_kb())
	await state.set_state(FSMCreateOrder.CHOSE_PAY)


@router.message(FSMCreateOrder.BALANCE_PAY, F.text.in_({'–ê–≤–∞–Ω—Å –∑ –Ω–∞–∫–ª–∞–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–µ–º', '–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞'}))
async def balance_pay(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–∞–ø–∏—Ç—É—î —é–∑–µ—Ä–∞ —Ç–∏–ø –æ–ø–ª–∞—Ç–∏ (–ø–æ–≤–Ω–∞ –∞–±–æ –Ω–∞–∫–ª–∞–¥–Ω–∏–π).

	:param msg: Message
	:param state: FSMContext
	:return: none
	"""
	available_balance = await order.get_balance(msg.from_user.id)
	if msg.text == '–ê–≤–∞–Ω—Å –∑ –Ω–∞–∫–ª–∞–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–µ–º':
		await msg.answer(f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å: {available_balance},00–≥—Ä–Ω\n\n'
						'–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∞–≤–∞–Ω—Å—É:')
		await state.set_state(FSMCreateOrder.BALANCE_PAY_ADVANCE)

	elif msg.text == '–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞':
		await msg.answer(f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å: {available_balance},00–≥—Ä–Ω\n\n'
						'–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –æ–ø–ª–∞—Ç–∏:')
		await state.set_state(FSMCreateOrder.BALANCE_PAY_FULL)


@router.message(FSMCreateOrder.BALANCE_PAY)
async def balance_pay_wrong(msg: Message, state: FSMContext) -> None:
	"""
	–Ø–∫—â–æ —é–∑–µ—Ä –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∞ –≤–≤—ñ–≤ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç.

	:param state: FSMContext
	:param msg: Message
	:return: None
	"""
	await msg.answer('–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –æ–ø–ª–∞—Ç–∏ –Ω–∏–∂—á–µ:', reply_markup=reply.advance_or_full_kb())
	await state.set_state(FSMCreateOrder.BALANCE_PAY)


@router.message(FSMCreateOrder.BALANCE_PAY_ADVANCE)
async def balance_pay_advance(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î —Å—É–º—É –∞–≤–∞–Ω—Å—É –∑ –±–∞–ª–∞–Ω—Å—É —Ç–∞ –æ—á—ñ–∫—É—î —Å—É–º—É –Ω–∞–∫–ª–∞–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É –≤—ñ–¥ —é–∑–µ—Ä–∞.

	:param msg: Message
	:param state: FSMContext
	:return: none
	"""
	await state.update_data(balance_advance=msg.text)
	await msg.answer('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –Ω–∞–∫–ª–∞–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É:')
	await state.set_state(FSMCreateOrder.POSTPAYMENT)


@router.message(FSMCreateOrder.POSTPAYMENT)
async def postpayment(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î —Å—É–º—É –Ω–∞–∫–ª–∞–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É –∑ –±–∞–ª–∞–Ω—Å—É.

	:param msg: Message
	:param state: FSMContext
	:return: none
	"""
	await state.update_data(postpayment=msg.text)
	await msg.answer(f"–ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂: {msg.text}")
	await state.set_state(FSMCreateOrder.CHECK_DATA_ORDER)


@router.callback_query(FSMCreateOrder.BALANCE_PAY_FULL)
async def balance_pay_full(msg: Message, state: FSMContext) -> None:
	"""
	–•–µ–Ω–¥–ª–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î —Å—É–º—É –ø–æ–≤–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å—É.

	:param msg: Message
	:param state: FSMContext
	:return: none
	"""
	await state.update_data(balance_full=msg.text)
	await msg.answer(f"–ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {msg.text}")
	await state.set_state(FSMCreateOrder.CHECK_DATA_ORDER)


@router.message(FSMCreateOrder.SCREEN_PAY, F.text.in_({'–ê–≤–∞–Ω—Å –∑ –Ω–∞–∫–ª–∞–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–µ–º', '–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞'}))
async def screen_pay(msg: Message, state: FSMContext) -> None:
	if msg.text == '–ê–≤–∞–Ω—Å –∑ –Ω–∞–∫–ª–∞–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–µ–º':
		await msg.answer('–Ø–∫–∞ –±—É–¥–µ —Å—É–º–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É?')
		await state.set_state(FSMCreateOrder.SCREEN_PAY_ADVANCE)
	elif msg.text == '–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞':
		await msg.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω –∑ –æ–ø–ª–∞—Ç–æ—é:\n\n'
						"–û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö –¥–æ –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞.")
		await state.set_state(FSMCreateOrder.SCREEN_PAY_FULL)


@router.message(FSMCreateOrder.SCREEN_PAY)
async def balance_pay_wrong(msg: Message, state: FSMContext) -> None:
	"""
	–Ø–∫—â–æ —é–∑–µ—Ä –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∞ –≤–≤—ñ–≤ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç.

	:param state: FSMContext
	:param msg: Message
	:return: None
	"""
	await msg.answer('–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –æ–ø–ª–∞—Ç–∏ –Ω–∏–∂—á–µ:', reply_markup=reply.advance_or_full_kb())
	await state.set_state(FSMCreateOrder.SCREEN_PAY)


@router.message(FSMCreateOrder.SCREEN_PAY_ADVANCE)
async def screen_pay_advance(msg: Message, state: FSMContext) -> None:
	await state.update_data(postpayment=msg.text)
	await msg.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω –∑ –æ–ø–ª–∞—Ç–æ—é:\n\n'
					"–û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö –¥–æ –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞.")
	await state.set_state(FSMCreateOrder.SCREEN_PAY_FULL)


@router.message(FSMCreateOrder.SCREEN_PAY_FULL)
async def screen_pay_full(msg: Message, bot: Bot, state: FSMContext) -> None:
	user_path = await order.get_user_name(msg.from_user.id)
	photo_id = msg.photo[-1].file_id

	photo_file = await bot.get_file(photo_id)
	photo_path = photo_file.file_path.removeprefix('photos/')

	if not os.path.exists(f'bot/media/payment/{user_path}/'):
		os.mkdir(f'bot/media/payment/{user_path}/')

	await bot.download(file=photo_id, destination=f'bot/media/payment/{user_path}/{photo_path}')
	await msg.answer('–°–∫—Ä—ñ–Ω –∑ –æ–ø–ª–∞—Ç–æ—é –ø—Ä–∏–Ω—è—Ç–æ.')

	await state.set_state(FSMCreateOrder.CHECK_DATA_ORDER)


@router.message(FSMCreateOrder.CHECK_DATA_ORDER)
async def check_data_order(msg: Message, state: FSMContext) -> None:
	await msg.answer('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.')
	context_data = await state.get_data()
	model = context_data.get('model')
	size = context_data.get('shoes_size')
	client_name = context_data.get('client_name')
	client_phone = context_data.get('client_phone')
	other_data = context_data.get('other_data')
	balance_advance = context_data.get('balance_advance') if context_data.get('balance_advance') else False
	postpayment = context_data.get('postpayment') if context_data.get('postpayment') else False
	balance_full = context_data.get('balance_full') if context_data.get('balance_full') else False
	data = f"<b>–ú–æ–¥–µ–ª—å –≤–∑—É—Ç—Ç—è:</b> {model.article}\n\n"\
		f"<b>–†–æ–∑–º—ñ—Ä:</b> {size}\n"\
		f"<b>–ü–Ü–ë –∫–ª—ñ—î–Ω—Ç–∞:</b> {client_name}\n"\
		f"<b>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞:</b> {client_phone}\n"\
		f"<b>–Ü–Ω—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:</b> {other_data}\n"
	await msg.answer(data, reply_markup=reply.check_data_order_kb())
	await state.set_state(FSMCreateOrder.FINISH_CREATE_ORDER)


@router.message(FSMCreateOrder.FINISH_CREATE_ORDER)
async def finish_create_order(msg: Message, state: FSMContext) -> None:
	await msg.answer('–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n–¢–¢–ù –±—É–¥–µ –≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ –Ω–∞ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –≤–∞—à–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ.')
